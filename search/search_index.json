{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DevOps Velocity and ELM","text":""},{"location":"#demonstration","title":"Demonstration","text":"<p>The Demo scenario is divided into two sections presenting how the integrated IBM solution can help clients.</p>"},{"location":"#integrating-devops-velocity-with-elm-to-achieve-business-outcomes","title":"Integrating DevOps Velocity with ELM to achieve Business Outcomes","text":"<ol> <li>Visualize and Optimize the flow of work to improve team productivity.</li> <li>Eliminate guess work and use data to make better investment decisions for process improvement.</li> </ol>"},{"location":"#enablement","title":"Enablement","text":"<p>The Enablement exercises provide detailed setup instructions on how to integrate DevOps Velocity with EWM and ERM.</p>"},{"location":"#configuring-the-integration-between-devops-velocity-and-elm","title":"Configuring the integration between DevOps Velocity and ELM","text":"<ol> <li>Integrate DevOps Velocity with Engineering Workflow Management</li> <li>Integrate DevOps Velocity with Engineering Requirements Management (RM Project)</li> <li>Integrate DevOps Velocity with Engineering Requirements Management (Global Configuration)</li> </ol>"},{"location":"demonstration/","title":"Integrating DevOps Velocity with ELM to achieve Business Outcomes","text":""},{"location":"demonstration/#business-scenarios-covered-by-this-demonstration","title":"Business Scenarios covered by this demonstration:","text":""},{"location":"demonstration/#visualize-and-optimize-the-flow-of-work-to-improve-team-productivity","title":"* Visualize and Optimize the flow of work to improve team productivity","text":""},{"location":"demonstration/#eliminate-guess-work-and-use-data-to-make-better-investment-decision-for-process-improvement","title":"* Eliminate guess work and use data to make better investment decision for process improvement","text":""},{"location":"demonstration/#understanding-the-business-problem","title":"Understanding the Business Problem","text":"<p>Many DevOps organizations use Dora metrics or Flow metrics to measure the efficiency of their software delivery pipeline. While flow metrics focus on the stream of work items and the efficiency of processes, Dora metrics provide insights into the effectiveness of software development and delivery practices. Regardless of which KPIs are adopted, both provide a high level measure of the end to end software delivery process.</p> <p>DORA Metrics</p> <ol> <li>Deployment Frequency - How often do production releases occur?</li> <li>Lead Time to Change - What is the length of time it takes for code changes to be made available in production?</li> <li>Change Failure Rate - What is the frequency of deployments which cause an issue in production?</li> <li>Mean Time to Recovery - What is the length of time it takes to recover from the production issue?</li> </ol> <p>Flow Metrics</p> <ol> <li>Flow Time: Is time-to-market getting shorter?</li> <li>Flow Velocity: Is value delivery accelerating? </li> <li>Flow Efficiency: Is upstream work holding up delivery?</li> <li>Flow Load: Is demand vs capacity being balanced?</li> <li>Flow Distribution: Are we investing in both value generation and protection?</li> </ol> <p>Now it is a well know fact that any process is only as fast as its slowest point. And all processes have a least slow point. The \"trick\" is to find the slow bottleneck, take action to improve, and measure the outcome to understand if the desired outcome was achieved.</p> <p>Using these high level vanity metrics and armed with a desire to improve, the next typical step would be for the organization to execute a Value Stream Mapping exercise assembling a team of people to share their opinions on how long each step of the end to end process takes and recording their input on a value stream map - value add time, non-value add time, process efficiency for each individual step in their process. This can be a very expensive and laboreous process where the outcome is only valid until some improvement action is implemented. Because, once the fix is implemented, the bottleneck has probably moved to another location in the delivery pipeline.</p> <p></p> <p>The alternative is to Value Stream Mapping is Value Stream Management. A Value Stream Management solution, like DevOps Velocity, is continuously ingesting data from the tools used in the software delivery pipeline and presenting that data in a holistic value stream providing insight, in almost real time, on not only how efficient the software delivery pipeline is but where in the pipeline opportunities for improvement exist. Making Value Stream Management a much more scientific approach eliminating the guess work and taking action based on data instead of opinion.</p> <p></p> <p>DevOps Velocity helps organizations by visualizing delivery pipeline data in a holistic dashboard allowing teams to make accurate decisions on where to invest for improvement to achieve their desired business outcomes.</p>"},{"location":"demonstration/#introducing-devops-velocity","title":"Introducing DevOps Velocity","text":"<p>DevOps Velocity is a multi-container application installed in a Kubernetes container management system.  </p> <p>The DevOps Velocity value stream\u2019s view provides a strategic window into your life-cycle workflow while simultaneously enabling you to drill-down and monitor individual elements with the intent of optimizing pipeline flow. These elements typically represent work items/issues, commits, pull requests, builds, deployments, and tests that are collected from many tools making up your delivery pipeline and integrated into Velocity via plugins. Individual elements are represented graphically by small circles, squares, or triangles, depending on the type, providing information from logically related tools, such as issues managed in an ALM solution linked to one\u2019s source control management (SCM) system. How elements are visualized in a DevOps Velocity value stream can be simple to very complex. You are only limited by your knowledge of how to architect a value stream.</p> <p>The pipeline capability enables organizations to drive releases by using application-focused methods. Add applications to logical environments and let DevOps Velocity generate basic release plans required to deploy the applications. Use quality gates to implement an enhanced level of automated governance helping organizations reduce business risk as software change moves through the delivery pipeline to the production environment.</p> <p>DevOps Velocity\u2019s enterprise-scale release management capabilities supports both cloud-native and on-premises deployment. Use DevOps Velocity to move releases through all of your development life-cycle environments including development, testing, and production. Create a predictable schedule of releases for your software applications. Share release statuses with all stakeholders so that they know the schedules, the key milestones, current status, and issues that may delay releases.</p> <p>The Insights view helps organizations to assess the efficiency of product teams and the speed at which they are able to deliver value to the end users. Teams can measure every aspect of the development lifecycle with the supplied charts. Teams can create their own charts with metric definitions and upload custom data to DevOps Velocity using the Application programming interface (API) endpoints. Since data sources also encompass plug-ins and API calls, project data can come from virtually anywhere, including planning and development tools, testing and building applications, and deployment solutions.</p> <p>In this demonstration, you will focus on the Value Stream and Insights views.</p> <p>For more information about DevOps Velocity, visit Velocity's product documentation page. </p>"},{"location":"demonstration/#business-scenario-1-visualize-and-optimize-the-flow-of-work-to-improve-team-productivity","title":"Business Scenario 1: Visualize and Optimize the flow of work to improve team productivity.","text":""},{"location":"demonstration/#11-devops-velocity-and-the-value-stream-data","title":"1.1 DevOps Velocity and the value stream data","text":"<p>The value stream is architected to align with a software development team's phases and stages making up the software delivery pipeline. DevOps Velocity tracks the number of work items and average time a work item spends in each one of the stages. It is DevOps Velocity's ability to present this type of information in a single control plane which allows teams to focus on improvement over wasting time trying to determine which stage is the software delivery pipeline is the slowest point.</p> Step Details Additional Information 1"},{"location":"demonstration/#12-working-with-devops-velocity-kpis-and-metrics","title":"1.2 Working with DevOps Velocity KPIs and Metrics","text":"Step Details Additional Information 1"},{"location":"demonstration/#13-understanding-devops-velocitys-alert-capabilities","title":"1.3 Understanding DevOps Velocity's Alert capabilities","text":"Step Details Additional Information 1"},{"location":"demonstration/#14-devops-velocity-and-the-swimlane-view","title":"1.4 DevOps Velocity and the Swimlane View","text":"Step Details Additional Information 1 <p>Congratulations on successfully configuring the DevOps Velocity value stream to visualize ERM artifacts.</p> <p>Return to Top of Demonstration Page </p>"},{"location":"demonstration/#business-scenario-2-eliminate-guess-work-and-use-data-to-make-better-investment-decisions-for-process-improvement","title":"Business Scenario 2: Eliminate guess work and use data to make better investment decisions for process improvement","text":""},{"location":"demonstration/#21-adding-devops-velocitys-bottleneck-detection-capability","title":"2.1 Adding DevOps Velocity's Bottleneck Detection capability","text":"Step Details Additional Information 1"},{"location":"demonstration/#22-working-with-devops-velocitys-dashboards-and-charts","title":"2.2 Working with DevOps Velocity's DashBoards and Charts","text":"Step Details Additional Information 1 <p>Return to Top of Demonstration Page</p>"},{"location":"enablement/","title":"Configuring the integration between DevOps Velocity and ELM","text":""},{"location":"enablement/#topics-covered-in-this-enablement-exercise","title":"Topics covered in this Enablement exercise","text":""},{"location":"enablement/#overview","title":"Overview","text":"<ol> <li>DevOps Velocity Overview</li> <li>What is a Velocity Plugin</li> <li>DevOps Velocity's value stream map overview</li> </ol>"},{"location":"enablement/#integrating-devops-velocity-with-ewm","title":"Integrating DevOps Velocity with EWM","text":"<ol> <li>Configuring the plugin to integrate DevOps Velocity and EWM</li> <li>Creating the EWM Value Stream in DevOps Velocity</li> <li>Editing the value stream map template to visualize EWM Artifact Workflow</li> </ol>"},{"location":"enablement/#integrating-devops-velocity-with-erm","title":"Integrating DevOps Velocity with ERM","text":"<ol> <li>Preparing RM projects (reg mgmt and global configurations) for integration with Velocity</li> <li>Configuring the plugin to integrate DevOps Velocity with ERM (DOORs NG req mgmt project)</li> <li>Configuring the plugin to integrate DevOps Velocity with ERM (DOORs NG global configuration)</li> <li>Creating the ERM Value Stream in DevOps Velocity</li> <li>Editing the value stream map template to visualize EWM Artifact Workflow</li> </ol>"},{"location":"enablement/#about-this-enablement-exercise","title":"About this Enablement Exercise","text":"<p>This lab is not a complete enablement activity teaching individuals on the full features or functionality of DevOps Velocity and/or ELM. While there is some informational material provided, it is only to help establish foundational knowledge for those performing the steps below. This exercise simply focuses on integrating the two IBM solutions. To learn more about the individual solutions, review the product documentation for available tutorials and learning exercises.</p>"},{"location":"enablement/#section-overview","title":"Section: Overview","text":""},{"location":"enablement/#devops-velocity-overview","title":"DevOps Velocity Overview","text":"<p>DevOps Velocity is a multi-container application installed in a Kubernetes container management system. </p> <p></p> <p>The DevOps Velocity value stream\u2019s view provides a strategic window into your life-cycle workflow while simultaneously enabling you to drill-down and monitor individual elements with the intent of optimizing pipeline flow. These elements typically represent work items/issues, commits, pull requests, builds, deployments, and tests that are collected from many tools making up your delivery pipeline and integrated into Velocity via plugins. Individual elements are represented graphically by small circles, squares, or triangles, depending on the type, providing information from logically related tools, such as issues managed in an ALM solution linked to one\u2019s source control management (SCM) system. How elements are visualized in a DevOps Velocity value stream can be simple to very complex. You are only limited by your knowledge of how to architect a value stream.</p> <p>The pipeline capability enables organizations to drive releases by using application-focused methods. Add applications to logical environments and let DevOps Velocity generate basic release plans required to deploy the applications. Use quality gates to implement an enhanced level of automated governance helping organizations reduce business risk as software change moves through the delivery pipeline to the production environment.</p> <p>DevOps Velocity\u2019s enterprise-scale release management capabilities supports both cloud-native and on-premises deployment. Use DevOps Velocity to move releases through all of your development life-cycle environments including development, testing, and production. Create a predictable schedule of releases for your software applications. Share release statuses with all stakeholders so that they know the schedules, the key milestones, current status, and issues that may delay releases.</p> <p>The Insights view helps organizations to assess the efficiency of product teams and the speed at which they are able to deliver value to the end users. Teams can measure every aspect of the development lifecycle with the supplied charts. Teams can create their own charts with metric definitions and upload custom data to DevOps Velocity using the Application programming interface (API) endpoints. Since data sources also encompass plug-ins and API calls, project data can come from virtually anywhere, including planning and development tools, testing and building applications, and deployment solutions.</p> <p>For more information about DevOps Velocity, visit Velocity's product documentation page. </p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#what-is-a-velocity-plugin","title":"What is a Velocity Plugin","text":"<p>Included as part of a Velocity installation are plugins which allow the Velocity Administrator to create connections between delivery pipeline applications and synchronize data between Velocity and the target application source (ELM, Jira, GitHub, DevOps Control, etc). Each plugin defines an expected record type and communication method. Communication can be uni-directional or bi-directional. To use a plug-in, you must configure an integration. There are multiple ways to configure an integration:</p> <ul> <li>Create an integration definition on the Plugins tab of the Integrations page.</li> <li>Install the plug-in and then create an integration definition.</li> <li>Add an integration definition to a value stream JSON file.</li> <li>Configure a deployment plan task for one of the native integration types.</li> </ul> <p></p> <p>In total there are over 45 plugins available.</p> <p>Once configured and as per that plugin\u2019s synchronization timing, Velocity starts a plugin container image, makes the connection with the target application, and retrieves all data changes from the last sync time. NOTE: that sync time duration will vary depending on the amount of data being added to Velocity\u2019s MongoDB repository. </p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#devops-velocitys-value-stream-map-overview","title":"DevOps Velocity's value stream map overview","text":"<p>A Value Stream map file is used to describe the phases and stages a work item or artifact will go through from inception to implementation displaying the work items in their current state.</p> <p>The highest level of a value stream is a phase. Phases represent important, organizational parts of the value stream, such as \"Planning,\" or \"Development.\" On the Value stream view, processing is done in left-right order. For example, your first phase might be for planning and contain items created in an issue tracking system. Your next phase, used for development, can track source control activity related to the issues, and any builds triggered by the activity. Your final phase, used for deployment, might track the related build artifacts as they move through your testing environments toward production.</p> <p>Phases contain stages that define process flow within a phase. A development phase that integrates a source control tool might contain an In Progress stage followed by In Review and Merged stages. When you customize a value stream, you define the phases and stages and their order.</p> <p>Stages are containers for dots. Dots represent units of work from DevOps Velocity or tools that are integrated into the value stream. Git commits or Jira issues, to take just two, are represented by individual dots. Work items, such as commits and builds, can be combined into individual dots. A dot's position in the value stream conveys important information about the object. Dots in a stage named Merged might represent items merged into Git repositories. An item's shape and color convey information about the item's type and status. A dot outlined in red, for example, might mean the item is past schedule. When dots change state, they move to new stages in near-real time. Finally, when you click on a dot, the displayed card provides information about the work items, including their history, and provides links to associated tools.</p> <p>For this purposes of this enablement exercise, a very simple approach was followed in archtitecting the value stream. The phases and stages were mapped to the artifact workflows defined in EWM showing only the current state of the user stories, defects, and tasks.</p> <p></p> <p>Reviewing the Value Stream Map image, notice the following:</p> <ol> <li>Definition of the four phases - Open, In Progress, Approval, Released</li> <li>Within the Open phase there are two stages named New and ReOpened</li> <li>The query statement in the Open stage instructs Velocity to display all work items which are currently in a New state.</li> <li>The query statement in the ReOpened stage instructs Velocity to display only work items of type Defect which in an ReOpened state.</li> <li>And finally the target stanza on each stage helps to visualize the next stage that a work item could be displayed in.</li> </ol> <p>For the purposes of this enablement exercise, a template has been created to help bootstrap creation and configuration of the value stream.</p> <p>If you would like to review the entire VSM template, open the link in a new browser tab: EWM VS map Template </p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#section-integrating-devops-velocity-with-ewm","title":"Section: Integrating DevOps Velocity with EWM","text":"<p>To visualize EWM artifacts as \"DOTS\" in a DevOps Velocity value stream, three basic steps must happen:</p> <ol> <li>Configure a plugin to allow Velocity to communicate with EWM.</li> <li>Create a Value Stream to provide a \"single pane of glass\" interface to visualize the \"DOTS\".</li> <li>Architect the Value Stream by editing the Value Stream Map (json file) to replicate the workflows being used in EWM.</li> </ol>"},{"location":"enablement/#configuring-the-plugin-to-integrate-devops-velocity-and-ewm","title":"Configuring the plugin to integrate DevOps Velocity and EWM","text":"<p>The purpose of this exercise is to provide instruction on how to setup the integration between DevOps Velocity with EWM. It is assumed that the ELM server has already been setup and that an EWM project has been configured. For this lab exercise we will be using the JKE Banking sample application available with ELM. </p> Step Details Additional Information 1 To access the Velocity plugin interface, open Velocity in a browser and log in.  (uid: admin / pwd: admin) 2 Click on the settings icon. (Top RHS browser window) 3 Select Integrations from the LHS navigation bar. 4 Click on the Installed tab and review the many plugins already available. NOTE: While this exercise does not cover all topics related to plugins, know that administrator users can install additional plugins from the \"Available\" tab or upload custom plugins using the \"Load Plugin\" feature. 5 In the search control, enter \u201cEWM\u201d. 6 Click the twisty icon for the EWM plugin and note that there are multiple versions of this plugin available for installation. 7 Click the \"Add Integration\" button (RHS of page) for IBM Engineering Workflow Management (EWM) v1.1.37. 8 Working in the pop up window enter the following values into the fields on the form:  Integration name: EWM(JKEBanking) Server URL: TODO: need to update Projects (Comma Separated List): JKE Banking (Change Management) User ID: sysadmin Password: passw0rd (0=zero) Show hidden properties: enabled Logging level: ALL 9 Click the \"Add\" button when done. 10 Click the Configured tab on the Integrations page. 11 After a few seconds, confirm that the integration Status shows online. 12 Click the 3 dots on RHS of integration line and select \"View Logs\" from the options presented. NOTE: If the status is not showing as Online, ensure the ELM Server is available. If the server is running, check the plugin settings to ensure they are properly set  by selecting Edit. 13 Select the Log file and view output contents. <p>Congratulations on successfully configuring the EWM Plugin.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#creating-the-ewm-value-stream-in-devops-velocity","title":"Creating the EWM Value Stream in DevOps Velocity","text":"<p>Visualizing the dots (Stories, Tasks, Defects) on a value stream dashboard requires a Value Stream created. This section will share instructions on how to create the Value Stream.</p> Step Details Additional Information 1 Continuing to work in DevOps Velocity, navigate to the Value Stream view page. 2 Click the \"All value streams\" tab top RHS of browser page. 3 Click the \"Create\" button. 4 On the pop-up window, enter a meaningful name, and select Default team from the Team drop down list box.  e.g. JKE Banking (Change Management) 5 Click the \"Create\" button. NOTE: Clicking the \"Create &amp; Configure\" will lead the user through a series of conifguration windows offering a wizard driven approach to creating the value stream. 6 You should now be presented with a basic value stream visualization. <p>Congratulations on successfully configuring a basic DevOps Velocity value stream.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#editing-the-value-stream-map-template-to-visualize-ewm-artifact-workflow","title":"Editing the value stream map template to visualize EWM Artifact Workflow","text":"<p>As previously mentioned, this enablement exercise is using a value stream template file to bootstrap the value stream creating process. More more information about configuring the value stream map file refer to section DevOps Velocity's value stream map overview.</p> <p>However, even though much of the value stream architecture work has already been completed, specific edits still need to be made to the template adding the plugin integration name so that Velocity knows which collection of data should be visualized in the value stream.</p> Step Details Additional Information 1 Continuing to work in the newly created value stream view, locate and click on the wrench icon. 2 Select the \"Edit value stream map\" option. 3 Open the EWM VS map file in a browser tab. EWM VS map Template 4 Working in the new browser tab, select/highlight the entire VS map code, and copy. 5 Returning to the value stream map editor in Velocity, select/highlight the entire contents of the editor and replace by pasting in the template code. 6 Working in the DevOps Velocity value stream editor, locate the integrations stanza within the json file near end of the file. 7 Replace the \"EWM integration name\" text string with the name of your EWM plugin.  e.g. EWM(JKEBanking) 8 Verify that the update was saved successfully. NOTE: DevOps Velocity offers version control to help in managing value stream map changes. With the recent change, note the addition of  a new version. 9 Click the \"Back\" button to return to the value stream view. 10 You should now see a re-configured value stream architecture with \"DOTS\". 11 To arrange the Stages and location of Stages on the value stream view, enable the drag feature by clicking on the pencil icon located on the mini toolbar. 12 Hover the mouse cursor over one of the stages. Click and hold the mouse button while moving the stage into the desired position. The image to the right shows an orientation where lines are not bisecting stages and provides an easy to read layout. 13 Disable the drag feature when done. <p>Congratulations on successfully configuring the DevOps Velocity value stream to visualize EWM artifacts.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#section-integrating-devops-velocity-with-erm","title":"Section: Integrating DevOps Velocity with ERM","text":"<p>Due to the flexibility provided to clients using ERM (DOORs NG), certain setup steps are necessary to properly visualize the requirement artifact types in a DevOps Velocity value stream. Know that all setup steps align to best practices user should be following.</p> <p>Because users can create new artifact types and artifact attributes, including attributes to capture status, it was decided that in order to visualize requirements in DevOps Velocity that to track status, users must specify a project workflow.</p> <p>Also, as there are many types of requirements, some of which the user would not visualize in Velocity, shared views must be configured allowing Velocity's DOORs NG plugin to know exactly which artifact type to sync on.</p> <p>This enablement exercise will walk through the steps to:</p> <ol> <li>Prepare the RM project to be able to synchronize with Velocity.</li> <li>Configure plugins for RM projects regardless of whther they have been enabled for Global Configuration or not.</li> <li>Create the Value Streams to visualize both a requirements management project and a global configuration project.</li> </ol>"},{"location":"enablement/#preparing-rm-projects-reg-mgmt-and-global-configurations-for-integration-with-velocity","title":"Preparing RM projects (reg mgmt and global configurations) for integration with Velocity","text":"<p>To complete the following exercise, ERM has been setup with two requirements projects:</p> <ol> <li>JKE Banking (Requirements Management)</li> <li>Meter Reader GC (Global Configuration)</li> </ol> Step Details Additional Information 1 Launch ERM in a browser window and authenticate. (uid: sysadmin / pwd: passw0rd) 2 Click on the hamburger icon (top LHS) and open the \"JKE Banking (Requirements Management)\" RM project. 3 Click on the gear icon (top LHS) and select \"Manage Project Properties\" from the options presented. 4 Working in the Artifact Types list box, locate and select the Feature artifact type. 5 In the editor window for the Feature artifact type, click on the workflow control and select the workflow used to architect the value stream.  In this situation, the default workflow was used. 6 Save the changes and repeat steps 4 and 5 setting the workflow for Artifact types Use Case Requirement and User Story Elaboration saving each time. NOTE: The requirement types chosen for this enablement exercise don't necessarily represent all Artifact Types a user may want to visualize in Velocity. However the steps are the same regardless of the Artifact type. 7 Click on the \"Artifacts\" tab in the ELM navigation bar. 8 Select \"All\" Artifacts, select \"Views\" and clear all filters. 9 Click on the Add filter icon. 10 Select \"Artifact Type\" as the attribute and select Feature, Use Case Requirement, and User Story Elaboration as the Artifact type values. 11 Click \"Add and Close\". 12 Click the \"Save as new view\" icon. 13 Enter a meaningful name (e.g. Velocity_Types), select \"Shared\", and click \"OK\". NOTE: If the userid/password combination used to configure the Velocity plugin is not an \"ELM Administrator\". The userid must have access to the DOORs NG project and must be able to execute views. More on this later. 14 The same process described above is used to prepare a Global Configuration project for integration with DevOps Velocity with the following differences:1. The project selected will be different (step 2). in the case of this exercise select Meter Reader GC.2. When you click on the gear icon (step 3), select Manage Components and Configurations.3. Select Stakeholder and System Requirements when setting the workflow. HINT: Creating an individual view for each of the Artifact types provides more flexibility in selecting which Artifact types you want to sync with DevOps Velocity. 15 For the Meter Reader GC project, in addition to creating a Velocity_Types view also create a view named Velocity_SystemRequirements for the System Requirement Artifact type and a view called Velocity_StakeholderRequirements for the Stakeholder Requirement Artifact type. <p>Congratulations on successfully preparing the RM projects and Artifact types for visualization in DevOps Velocity.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#configuring-the-plugin-to-integrate-devops-velocity-with-erm-doors-ng-req-mgmt-project","title":"Configuring the plugin to integrate DevOps Velocity with ERM (DOORs NG req mgmt project)","text":"<p>The purpose of this exercise is to provide instruction on how to setup the integration between DevOps Velocity with ERM. More specifically a DOORs NG requirements management project. It is assumed that the ELM server has already been setup and that a DOORs NG requirements management project has been configured. For this lab exercise we will be using the JKE Banking (Requirements Management) sample application available with ELM. </p> Step Details Additional Information 1 To access the Velocity plugin interface, open Velocity in a browser and log in.  (uid: admin / pwd: admin) 2 Click on the settings icon. (Top RHS browser window) 3 Select Integrations from the LHS navigation bar. 4 Click on the Installed tab and review the many plugins already available. NOTE: While this exercise does not cover all topics related to plugins, know that administrator users can install additional plugins from the \"Available\" tab or upload custom plugins using the \"Load Plugin\" feature. 5 In the search control, enter \u201cDOORS\u201d. 6 Click the twisty icon for the DOORS plugin and note that there are multiple versions of this plugin available for installation. 7 Click the \"Add Integration\" button (RHS of page) for IBM Engineering Requirements Management (Doors) v1.0.101. 8 Working in the pop up window enter the following values into the fields on the form:  Integration name: DOORS(JKEBanking) Server URL: TODO: need to update Project: JKE Banking (Requirements Management) Views (Comma Seperated List): Velocity_Types User ID: sysadmin Password: passw0rd (0=zero) Show hidden properties: enabled Logging level: ALL 9 Click the \"Add\" button when done. 10 Click the Configured tab on the Integrations page. 11 After a few seconds, confirm that the integration Status shows online. 12 Select the Log file and view output contents. <p>Congratulations on successfully configuring the ERM Plugin to integrate DevOps Velocity with a DOORs NG requirements management project.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#configuring-the-plugin-to-integrate-devops-velocity-with-erm-doors-ng-global-configuration","title":"Configuring the plugin to integrate DevOps Velocity with ERM (DOORs NG global configuration)","text":"<p>The purpose of this exercise is to provide instruction on how to setup the integration between DevOps Velocity with ERM. More specifically a DOORs NG Global Configuration project. It is assumed that the ELM server has already been setup and that a DOORs NG Global Configuration project has been configured. For this lab exercise we will be using the Meter Reader GC sample application available with ELM. </p> Step Details Additional Information 1 To access the Velocity plugin interface, open Velocity in a browser and log in.  (uid: admin / pwd: admin) 2 Click on the settings icon. (Top RHS browser window) 3 Select Integrations from the LHS navigation bar. 4 Click on the Installed tab and review the many plugins already available. NOTE: While this exercise does not cover all topics related to plugins, know that administrator users can install additional plugins from the \"Available\" tab or upload custom plugins using the \"Load Plugin\" feature. 5 In the search control, enter \u201cDOORS\u201d. 6 Click the twisty icon for the DOORS plugin and note that there are multiple versions of this plugin available for installation. 7 Click the \"Add Integration\" button (RHS of page) for IBM Engineering Requirements Management (Doors) v1.0.101. 8 Working in the pop up window enter the following values into the fields on the form:  Integration name: DOORS(MeterReaderGC) Server URL: TODO: need to update Global Configuration Name: Meter Reader GC Component Name: Meter Reader GC Stream Name: Meter Reader GC Initial Stream Views (Comma Seperated List): Velocity_StakeholderRequirements,Velocity_SystemRequirements User ID: sysadmin Password: passw0rd (0=zero) Show hidden properties: enabled Logging level: ALL 9 Click the \"Add\" button when done. 10 Click the Configured tab on the Integrations page. 11 After a few seconds, confirm that the integration Status shows online. 12 Select the Log file and view output contents. <p>Congratulations on successfully configuring the ERM Plugin to integrate DevOps Velocity with a DOORs NG Global Configuration project.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#creating-the-erm-value-stream-in-devops-velocity","title":"Creating the ERM Value Stream in DevOps Velocity","text":"<p>Visualizing the requirements (artifact types) on a value stream dashboard requires a Value Stream created. This section will share instructions on how to create the Value Stream.</p> Step Details Additional Information 1 Continuing to work in DevOps Velocity, navigate to the Value Stream view page. 2 Click the \"All value streams\" tab top RHS of browser page. 3 Click the \"Create\" button. 4 On the pop-up window, enter a meaningful name e.g. JKE Banking (Requirements Management), and select Default team from the Team drop down list box. Note: To create a value stream for a Global Configuration project, the steps are the same. The only difference with be the Value Stream name. Meter Reader GC vs. JKE Banking (Requirements Management) 5 Click the \"Create\" button. 6 You should now be presented with a basic value stream visualization. 7 Repeat the above steps creating a new value stream for the Meter Reader GC global configuration project. <p>Congratulations on successfully configuring a basic DevOps Velocity value stream to visualize ERM artifacts.</p> <p>Return to List of Enablement Topics </p>"},{"location":"enablement/#editing-the-value-stream-map-template-to-visualize-erm-artifact-workflow","title":"Editing the value stream map template to visualize ERM Artifact Workflow","text":"<p>As previously mentioned, this enablement exercise is using a value stream template file to bootstrap the value stream creating process. More more information about configuring the value stream map file refer to section DevOps Velocity's value stream map overview.</p> <p>However, even though much of the value stream architecture work has already been completed, specific edits still need to be made to the template adding the plugin integration name so that Velocity knows which collection of data should be visualized in the value stream.</p> Step Details Additional Information 1 Continuing to work in the newly created value stream view, locate and click on the wrench icon. 2 Select the \"Edit value stream map\" option. 3 Open the ERM VS map file in a browser tab. ERM VS map Template 4 Working in the new browser tab, select/highlight the entire VS map code, and copy. 5 Returning to the value stream map editor in Velocity, select/highlight the entire contents of the editor and replace by pasting in the template code. 6 Working in the DevOps Velocity value stream editor, locate the global query line within the json file at top of the file. 7 Replace the \"Project Name\" text string with the name of your ERM project name.  e.g. JKE Banking (Requirements Manangement) 8 Working in the DevOps Velocity value stream editor, locate the integrations stanza within the json file near end of the file. 9 Replace the \"EWM integration name\" text string with the name of your EWM plugin.  e.g. EWM(JKEBanking) 10 Verify that the update was saved successfully. 11 Click the \"Back\" button to return to the value stream view. 12 You should now see a re-configured value stream architecture with \"DOTS\". 13 To arrange the Stages and location of Stages on the value stream view, enable the drag feature by clicking on the pencil icon located on the mini toolbar. 14 Hover the mouse cursor over one of the stages. Click and hold the mouse button while moving the stage into the desired position. The image to the right shows an orientation where lines are not bisecting stages and provides an easy to read layout. 15 Disable the drag feature when done. 16 Working in the value stream, locate the \"View value stream data by\" control and select type from the list of options. 17 Notice the color of the \"DOTS\" and the legend has changed to show the requirement types instead of requirement priority. 17 Repeat the above steps to edit the value stream map file and arrange the stage for the Meter Reader GC global configuration project. <p>Congratulations on successfully configuring the DevOps Velocity value stream to visualize ERM artifacts.</p> <p>Return to List of Enablement Topics </p>"}]}